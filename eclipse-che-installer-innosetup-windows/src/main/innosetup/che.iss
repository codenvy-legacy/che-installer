; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Eclipse Che"

#define MyAppVersion "${eclipse-che.version}"
#define MyAppPublisher "Codenvy"
#define MyAppURL "http://www.eclipse.org/che/"
#define MyAppExeName "eclipse-che.exe"
#define MyAppIcoName "che.ico"

#define cheElectronWinPath "Z:\user\che-electron\dist\win-unpacked"
#define dockerInstaller "Z:\opt\docker\InstallDocker.msi"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{76016B35-926B-4D3C-93BE-1FAEFBBB100E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\EclipseChe
DisableDirPage=no
DisableProgramGroupPage=yes
OutputBaseFilename=eclipse-che
Compression=lzma
SolidCompression=yes
ArchitecturesAllowed=x64 ia64
ArchitecturesInstallIn64BitMode=x64 ia64

DisableWelcomePage=no
LicenseFile=resources\eclipse-license.rtf

SetupIconFile=resources\che.ico
WizardImageFile=resources\wizard.bmp
WizardSmallImageFile=resources\che-logo.bmp

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Messages]
FinishedLabel=Setup has finished installing [name] on your computer.%nThe application may be launched by selecting the installed shortcuts.%n%nPlease make sure that the docker is running and drive C is shared in Docker for Windows Settings. 

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; 

[Files]
Source: "{#dockerInstaller}"; DestDir: "{tmp}"; Flags: nocompression dontcopy
Source: "{#cheElectronWinPath}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
Source: "resources\che.ico"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIcoName}"; 
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIcoName}"; Tasks: desktopicon

[Code]
function IsDockerInstalled: boolean;
begin
  try
    result := RegKeyExists(HKLM, 'SOFTWARE\Docker Inc.\Docker\1.0');
  except
    msgbox('Can not check whether the docker is installed. Make sure that the docker is installed. '#13#10, mberror, MB_OK);
  end;
end; 

function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  ResultCode: Integer;
begin
  if not IsDockerInstalled() then
    begin
      ExtractTemporaryFile('InstallDocker.msi');
      MsgBox('{#MyAppName} requires Docker 1.8+. The installer will attempt to install it', mbInformation, MB_OK);
            
      if not ShellExec('',ExpandConstant('{tmp}\InstallDocker.msi'),'/norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
        MsgBox('Docker installer failed to run!' + #13#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
      end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) and (not IsDockerInstalled()) then 
    begin
      MsgBox('The Docker is not installed. Installation will be terminated.', mbError, MB_OK)
      Abort();
    end;
end;
